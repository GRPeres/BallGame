from graphics import *
import random

# Cria a janela
win = GraphWin("Bolinha ...", 800, 600)

# Design
linhaSuperior = Line(Point(0, 40), Point(800, 40))
linhaSuperior.setWidth(10)
linhaSuperior.setFill(color_rgb(10, 100, 10))
linhaSuperior.draw(win)
# Design
linhaInferior = Line(Point(0, 550), Point(800, 550))
linhaInferior.setWidth(3)
linhaInferior.setFill(color_rgb(10, 100, 10))
linhaInferior.draw(win)

# Ball Design
col = 390
lin = 300
raio = 15
circulo = Circle(Point(col, lin), raio)
circulo.setFill(color_rgb(10, 10, 100))
circulo.draw(win)

# Gamescore UI
pts = 0
pontos = Text(Point(400, 575), "Pontos: " + str(pts))
pontos.setSize(14)
pontos.draw(win)

# Design da barra (antes do primeiro input)
colIni = 340
tamanho = 100
barra = Line(Point(colIni, 530), Point(colIni + tamanho, 530))
barra.setFill(color_rgb(100, 10, 10))
barra.setWidth(10)
barra.draw(win)

# Variaveis no Startup

difficulty = 7
barramento = 20
xbrick = 5
ybrick = 60
bricks = {}
scopexTop_Right = []
scopeyTop_Right = []
scopexBottom_Left = []
scopeyBottom_Left = []
levelDistance = 2
Clock = .07  # Tempo entre uma atualizacao e outra do jogo
velocidade = 5 # velocidade da bola
start = True
continuar = True

while continuar:
# Fisica do jogo

    if (colIni + 20) <= 701 and (colIni - 20) >= -1:
        colIni = colIni + barramento
        barra.undraw()
        barra = Line(Point(colIni, 530), Point(colIni + 100, 530))
        barra.setFill(color_rgb(100, 10, 10))
        barra.setWidth(10)
        barra.draw(win)
    elif (colIni + 20) >= 701:
        barramento = -barramento
        while (colIni + 20) >= 701:
            colIni = colIni - 20
    elif (colIni - 20) <= -1:
        barramento = -barramento
        while (colIni - 20) <= -1:
            colIni = colIni + 20

    # Aleatoriza a velocidade e direcao da bola no primeiro frame do jogo
    if start:
        for o in range(0, 200, 30):
            NoBlock = random.randrange(difficulty - 3 ,difficulty)
            for i in range(0, 800, 50):
                if NoBlock >= (i / 50) or NoBlock >= 15 - (i/50):
                    index = ((o / 30 * 16).__int__() + (i / 50).__int__()).__str__()
                    bricks[index] = Rectangle(Point(0,0), Point(0,0))
                    bricks[index].draw(win)
                    scopexTop_Right.append(0)
                    scopeyTop_Right.append(0)
                    scopexBottom_Left.append(0)
                    scopeyBottom_Left.append(0)
                else:
                    index = ((o/ 30 * 16).__int__() + (i / 50).__int__()).__str__()
                    bricks[index] = Rectangle(Point(xbrick + i, ybrick + o), Point(xbrick + 45 + i, ybrick + 25 + o))
                    vermelho = random.randrange(0, 256)
                    verde = random.randrange(0, 256)
                    azul = random.randrange(0, 256)
                    bricks[index].setFill(color_rgb(vermelho, verde, azul))
                    bricks[index].draw(win)
                    scopexTop_Right.append(xbrick + i)
                    scopeyTop_Right.append(ybrick + o)
                    scopexBottom_Left.append(xbrick + 50 + i)
                    scopeyBottom_Left.append(ybrick + 30 + o)
        passada = random.randrange(1, 10)
        if random.random() < 0.5:
            passada = -passada
        start = False

    #Reconhece quando a Bola bate nos tijolinhos da pagina
    for q in range(1,112):
        if col >= scopexTop_Right[q] and lin >= scopeyTop_Right[q] and col <= scopexBottom_Left[q]and lin <= scopeyBottom_Left[q]:
            bricks[q.__str__()].undraw()
            scopeyTop_Right[q] = 0
            scopexTop_Right[q] = 0
            scopeyBottom_Left[q] = 0
            scopexBottom_Left[q] = 0

            velocidade = -velocidade
    #Reconhece quando a Bola bate na direita da pagina
    if (col + raio + passada) > 800:
        passada = -passada
        #Aumenta a dificuldade ao passar certa marca de pontos e incrementa o passo seja ele positivo ou negativo
        if pts >= levelDistance:

             if passada >= 0:
                 levelDistance = levelDistance * 2
                 passada += 5
             if passada <= 0:
                levelDistance = levelDistance * 2
                passada -= 5

    #Reconhece quando a Bola bate na esquerda da pagina
    if (col - raio + passada) < 0:
        passada = -passada
        #Aumenta a dificuldade ao passar certa marca de pontos e incrementa o passo seja ele positivo ou negativo
        if pts >= levelDistance:
            if passada >= 0:
                levelDistance = levelDistance * 2
                passada += 5
            if passada <= 0:
                levelDistance = levelDistance * 2
                passada -= 5

    #Reconhece quando a Bola bate no topo da pagina
    if lin < 65:
        velocidade = -velocidade

        #Aumenta a dificuldade ao passar certa marca de pontos e incrementa a velocidade seja ela positiva ou negativa
        if pts >= levelDistance:

            if velocidade >= 0:
                levelDistance = levelDistance * 2
                velocidade += 5
            if velocidade <= 0:
                levelDistance = levelDistance * 2
                velocidade -= 5

    #Reconhece quando a Bola bate na barra (Player)
    if lin >= 515 and col > colIni and col < (colIni + tamanho) and lin <= 516:
        velocidade = -velocidade

        #Atualiza os pontos a cada toque da bola na barra,
        pontos.undraw()
        pts += 1
        pontos = Text(Point(400, 575), "Pontos: " + str(pts))
        pontos.draw(win)

        #Aumenta a dificuldade ao passar certa marca de pontos e incrementa a velocidade seja ela positiva ou negativa
        if pts >= levelDistance:
            if velocidade >= 0:
                levelDistance = levelDistance * 2
                velocidade += 5
            if velocidade <= 0:
                levelDistance = levelDistance * 2
                velocidade -= 5

    # Nova posição do círculo
    circulo.undraw()
    col += passada
    lin += velocidade
    circulo = Circle(Point(col, lin), 15)
    circulo.setFill(color_rgb(10, 10, 100))
    circulo.draw(win)

    # Checa a cada tick pelo input do teclado
    tecla = win.checkKey()

    # Sair do joguinho
    if tecla == "Escape":
        continuar = False
        continue

    # Barra muda de direcao
    if tecla == "space":
        barramento = -barramento

    # Esse valor faz referência ao game-tick, ou seja, de quanto em quanto tempo o jogo atualiza
    time.sleep(Clock)

# Fechar a janela
win.close()
